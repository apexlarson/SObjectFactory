/**
 *  @project SObjectBuilder
 *  @group SObjectBuilder
 *  @description This is a wrapper class which contains commonly used providers that work with SObjects.
 */
@IsTest
public class SObjectParentProviders {
    private static final String ERROR_SPECIFIC_NO_RESULT = 'No records were returned by this specific parent query, Query: ';
    private static final String ERROR_DYNAMIC_NON_LOOKUP = 'Dynamic parent providers can only be used on Lookup fields. "{0}.{1}" is not a lookup.';

    public class DynamicParentProviderException extends SObjectFieldProviders.FieldProviderException {
        DynamicParentProviderException(schema.SObjectType objectType, schema.SObjectField field) {
            this(String.format(ERROR_DYNAMIC_NON_LOOKUP, new List<String>{
                String.valueOf(objectType), String.valueOf(field)
            }));
        }
    }
    /**
     *  @description Provides the ID for a given SObject, defined by reference or a query.
     *  @example
     *      RecordType myRecordType = [SELECT ...];
     *      Account myAccount = (Account)new SObjectBuilder(Account.sObjectType)
     *          .put(Account.RecordTypeId, new SObjectParentProviders.SpecificParentProvider(myRecordType))
     *          .create().getRecord();
     */
    public virtual class SpecificParentProvider implements IFieldProvider {
        /**
         *  @description Gets the query, if provided.
         */
        public String query { get; protected set; }

        /**
         *  @description Gets the SObject retrieved by this provider. This will not be set until the provider is used.
         */
        public SObject record { get; protected set; }

        /**
         *  @description Instantiates a new SpecificParentProvider which will provide the ID of the record returned by
         *      the given query. For best results, be sure to include "LIMIT 1" in the query.
         *  @param query The SOQL query to use to retrieve the specific parent.
         */
        public SpecificParentProvider(String query) {
            this.query = query;
        }

        /**
         *  @description Instantiates a new SpecificParentProvider which will provide the ID of the record passed to it.
         *  @param the record to assign as the parent.
         */
        public SpecificParentProvider(SObject record) {
            this.record = record;
        }

        public virtual Object getValue() {
            if (this.record == null) {
                List<SObject> records = Database.query(this.query);
                if (records.isEmpty()) {
                    throw new SObjectFieldProviders.FieldProviderException(ERROR_SPECIFIC_NO_RESULT + this.query);
                }
                this.record = records[0];
            }
            return this.record.Id;
        }
    }

    /**
     *  @description Creates a parent record for this Id field, and assigns the created record's Id.
     *  @example
     *      // Build a series of contacts, each looking up to the same account.
     *      List<Contact> myContacts = new SObjectBuilder(Contact.sObjectType)
     *          .put(Contact.AccountId, new SObjectParentProviders.GenericParentProvider())
     *          .count(15).build().getRecords();
     */
    public virtual class GenericParentProvider implements IDynamicProvider {
        /**
         *  @description Gets the SObjectType of the parent record which is being created as a parent.
         */
        public Schema.SObjectType sObjectType { get; protected set; }
        /**
         *  @description Gets the template, if provided, of the record which will be created.
         */
        public String template { get; protected set; }
        /**
         *  @description Gets the record generated by this provider. This will not be populated until it has been used
         *      in SObjectBuilder.
         */
        public SObject record { get; protected set; }

        /**
         *  @description Creates a new instance of a GenericParentProvider, which will determine which type of parent to
         *      create based on the field it is being assigned to. This signature will only work when assigned to a
         *      lookup field, or master-detail relationship.
         */
        public GenericParentProvider() { }
        /**
         *  @description Creates a new instance of a GenericParentProvider, which will provide a parent of the passed in
         *      SObjectType.
         *  @param sObjectType The SObjectType of the parent records to generate.
         */
        public GenericParentProvider(Schema.SObjectType sObjectType) {
            this.sObjectType = sObjectType;
        }
        /**
         *  @description Creates a new instance of a GenericParentProvider, which will provide a parent of the passed in
         *      SObjectType, using the passed in template.
         *  @param sObjectType The SObjectType of the parent record to generate.
         *  @param template The template to use for the parent record.
         */
        public GenericParentProvider(Schema.SObjectType sObjectType, String template) {
            this(sObjectType);
            this.template = template;
        }

        public virtual void initialize(SObjectFactoryState state, Schema.SObjectField field) {
            if (this.sObjectType == null) {
                List<Schema.SObjectType> lookupTypes = field.getDescribe().getReferenceTo();
                if (lookupTypes.isEmpty()) {
                    throw new DynamicParentProviderException(state.sObjectType, field);
                }
                this.sObjectType = lookupTypes[0];
            }
        }
        public virtual Object getValue() {
            if (this.record == null) {
                this.record = SObjectFactory.create(sObjectType, template);
            }
            return this.record.Id;
        }
    }

    /**
     *  @description Creates a fixed number of parent record for this Id field, and assigns the Ids in order. This
     *      implements the same repeating logic that a List Provider uses.
     *  @example
     *      // Build a series of contacts, each looking up to a different account.
     *      List<Contact> myContacts = new SObjectBuilder(Contact.sObjectType)
     *          .put(Contact.AccountId, new SObjectParentProviders.MultiParentProvider(15))
     *          .count(15).build().getRecords();
     */
    public virtual class MultiParentProvider
        extends SObjectFieldProviders.ListProvider
        implements IDynamicProvider
    {
        /**
         *  @description Gets the list of records which were generated by this provider. This will only be populated
         *      after this provider has been used by SObjectBuilder.
         */
        public List<SObject> records { get; protected set; }
        /**
         *  @description Gets the SObjectType of the parent records which are being created.
         */
        public Schema.SObjectType sObjectType { get; protected set; }
        /**
         *  @description Gets the template, if provided, of the records which will be created.
         */
        public String template { get; protected set; }
        /**
         *  @description Gets the number of records which will be created.
         */
        public Integer count { get; protected set; }

        /**
         *  @description Creates a new instance of a MultiParentProvider, creating a fixed number of parent records.
         *      The type of parents created will be automatically determined by the field this provider is being
         *      assigned to.
         *  @param count The number of parent records to create.
         */
        public MultiParentProvider(Integer count) {
            this.count = count;
        }
        /**
         *  @description Creates a new instance of a MultiParentProvider, creating a fixed number of parent records of
         *      the passed in SObjectType.
         *  @param sObjectType The SObjectType of the parent records to create.
         *  @param count The number of parent records to create.
         */
        public MultiParentProvider(Schema.SObjectType sObjectType, Integer count) {
            this.sObjectType = sObjectType;
            this.count = count;
        }
        /**
         *  @description Creates a new instance of a MultiParentProvider, creating a fixed number of parent records of
         *      the passed in SObjectType, using the provided template.
         *  @param sObjectType The SObjectType of the parent records to create.
         *  @param template The record template to use to create the parents.
         *  @param count The number of parent records to create.
         */
        public MultiParentProvider(Schema.SObjectType sObjectType, String template, Integer count) {
            this.sObjectType = sObjectType;
            this.template = template;
            this.count = count;
        }

        /**
         *  @description Creates a new instance of a MultiParentProvider, using a pre-created list of records as the
         *      parents.
         *  @param records A list of records to use as the parents for this provider.
         */
        public MultiParentProvider(List<SObject> records) {
            this.records = records;
            this.sObjectType = records.getSObjectType();
            this.count = records.size();
        }

        public virtual void initialize(SObjectFactoryState state, Schema.SObjectField field) {
            if (this.records == null) {
                if (this.sObjectType == null) {
                    List<Schema.SObjectType> lookupTypes = field.getDescribe().getReferenceTo();
                    if (lookupTypes.isEmpty()) {
                        throw new DynamicParentProviderException(state.sObjectType, field);
                    }
                    this.sObjectType = lookupTypes[0];
                }

                this.records = SObjectFactory.create(this.count, this.sObjectType, this.template);
            }
            this.values = new List<Id>(new Map<Id, SObject>(this.records).keySet());
        }
    }

    /**
     *  @description Creates and provides parents for the given field, ensuring that each record created will get a
     *      different parent.
     *  @example
     *      // Build a series of contacts, each looking up to a different account.
     *      List<Contact> myContacts = new SObjectBuilder(Contact.sObjectType)
     *          .put(Contact.AccountId, new SObjectParentProviders.UniqueParentProvider())
     *          .count(15).build().getRecords();
     */
    public virtual class UniqueParentProvider
        extends MultiParentProvider
        implements IDynamicProvider
    {
        /**
         *  @description Creates a new instance of a UniqueParentProvider, which will provide a different parent for
         *      each record created. This signature will determine which type of parent to create based on the field
         *      it is being assigned to.
         */
        public UniqueParentProvider() {
            super(0);
        }

        /**
         *  @description Creates a new instance of a UniqueParentProvider, which will provide a different parent of the
         *      provided sObjectType for each record created.
         *  @param sObjectType The SObjectType of the parents to create.
         */
        public UniqueParentProvider(Schema.SObjectType sObjectType) {
            super(sObjectType, 0);
        }

        /**
         *  @description Creates a new instance of a UniqueParentProvider, which will provide a different parent of the
         *      provided sObjectType and template for each record created.
         *  @param sObjectType The SObjectType of the parents to create.
         *  @param template The template to use when creating the parent records.
         */
        public UniqueParentProvider(Schema.SObjectType sObjectType, String template) {
            super(sObjectType, template, 0);
        }

        public override void initialize(SObjectFactoryState state, Schema.SObjectField field) {
            this.count = state.count;
            this.records = null;
            super.initialize(state, field);
        }
    }

    /**
     *  @deprecated use SObjectFieldProviders.standardProfileProvider instead.
     */
    public static IFieldProvider standardProfileProvider { get { return SObjectFieldProviders.standardProfileProvider; } }

    /**
     *  @deprecated use SObjectFieldProviders.adminProfileProvider instead.
     */
    public static IFieldProvider adminProfileProvider { get { return SObjectFieldProviders.adminProfileProvider; } }

    // Legacy Methods (If Installed)
    // End Legacy Methods
}